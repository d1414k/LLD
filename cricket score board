Question: Design a cricket scoreboard system 
	Total Score
	Wickets 
	Over 
	Batsman 1 scores 
	Batsman 2 scores
	
	
1. getScoreBoard
2. update data 

import java.util.*;

class Player{ // considering all players are all rounder
	private String name;
	private int teamId;
	private boolean isOut; // true => out
	private int runs;
	private int wickets;
	Player(int teamId, String name){
		this.teamId = teamId;
		this.name = "P:"+teamId+":"+name;
		isOut = false;
		runs = 0;
		wickets = 0;
	}
	public boolean isOut() {
		return isOut;
	}
	public void setOut(boolean isOut) {
		this.isOut = isOut;
	}
	public int getRuns() {
		return runs;
	}
	public void setRuns(int runs) {
		this.runs = runs;
	}
	/**
	* retuns no of runs scored 
	* -1 indicate out
	* available values -1,0,1,2,3,4,5,6
	*/
	public int hit() { 
	    return (int)(Math.random()*7) - 1;
	}
}
class Team{
	private int teamId;// 0- team1, 1 - team2
	private int runs; 
	private int wickets;
	private List<Player> players;
	Team(int id){
		players = new ArrayList<Player>();
		runs = 0;
		wickets = 0;
		teamId = id;
	}
	public int getRuns() {
		return runs;
	}
	public void setRuns(int runs) {
		this.runs = runs;
	}

	public int getWickets() {
		return wickets;
	}

	public void setWickets(int wickets) {
		this.wickets = wickets;
	}

	public int getTeamId() {
		return teamId;
	}
	/**
	 * it will add player in team
	 * teamid : id of players teams
	 * name : player name 
	 */
	public void addPlayer(int teamid, String name){
		Player p = new Player(teamid,name);
		players.add(p);
	}
	/*
	* It will return nextPlayer to bat
	*/
	public Player getNextPlayerToBat(){
		for(Player p : players){
			if(!p.isOut())
				return p;
		}
		System.out.println("No player available ");
		return null;
	}
	public void incrementWickets() {
		wickets++;
		
	}
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("Team : "+teamId+" Runs : "+runs +" Wickets : "+wickets);
		return sb.toString();
	}
}

class ScoreBoard{
	private Team []teams;
	
	public ScoreBoard(Team []teams) {
		this.teams = teams;
	}
	public void updateScoreBoard(){
		System.out.println("Score : "+teams[0]+" "+teams[1]);
	}
}
class Game {
	private MatchStatus matchStatus;
	private int win;
	private int maxOvers;
	Team teams[];
	private Player strike,nonStrike;
	ScoreBoard sb = null;
	Game(int maxOvers){
		this.maxOvers = maxOvers;
		teams = new Team[2];
		teams[0] = new Team(0);
		teams[1] = new Team(1);
		sb = new ScoreBoard(teams);
		for(int i = 0 ; i < 11 ; i++)
			teams[0].addPlayer(0,""+i);
		for(int i = 0 ; i < 11 ; i++)
			teams[1].addPlayer(1,""+i);
		win = -1;
		matchStatus = MatchStatus.LIVE;
	}
	
	public void start(boolean isTeam0WinToss){
		if(isTeam0WinToss){ // team0 will play first
			strike = teams[0].getNextPlayerToBat();
			nonStrike = teams[0].getNextPlayerToBat();
			for(int i = 0 ; i < maxOvers ; i++){
				for(int j = 0 ; j < 6 ; j++){
					if(matchStatus == MatchStatus.LIVE)
						processBall(0);
				}
			}
			for(int i = 0 ; i < maxOvers ; i++){
				for(int j = 0 ; j < 6 ; j++){
					if(matchStatus == MatchStatus.LIVE)
						processBall(1);
				}
			}
		}
		else{ // team1 will play first
			strike = teams[1].getNextPlayerToBat();
			nonStrike = teams[1].getNextPlayerToBat();
			for(int i = 0 ; i < maxOvers ; i++){
				for(int j = 0 ; j < 6 ; j++){
					if(matchStatus == MatchStatus.LIVE)
						processBall(1);
				}
			}
			for(int i = 0 ; i < maxOvers ; i++){
				for(int j = 0 ; j < 6 ; j++){
					if(matchStatus == MatchStatus.LIVE)
						processBall(0);
				}
			}
		}
		if(win == -1)
			matchStatus = MatchStatus.DRAWN;
		else
			matchStatus = MatchStatus.FINISHED;
		System.out.println("Game finished : with winning team : "+ getWinner());
	}
	private void processBall(int teamId){
		Team t = teams[teamId];
		if(t.getWickets() >= 10) return;
		int runs = strike.hit();
		System.out.println("This ball score : " + runs);
		if(runs == -1){ // out
			t.incrementWickets();
			strike.setOut(true);
			if(t.getWickets() == 10) { 
				System.out.println("All out : "+t.getTeamId());
				updateWinStatus();
				return;
			} 
			strike = t.getNextPlayerToBat();
		}
		else {
			t.setRuns(t.getRuns()+runs);
			strike.setRuns(strike.getRuns()+runs);
			if(runs == 1 || runs == 3 || runs == 5){
				Player temp = strike;
				strike = nonStrike;
				nonStrike = temp;
			}
		}
		updateWinStatus();
		sb.updateScoreBoard();
	}

	private void updateWinStatus() {
		if(teams[0].getRuns() > teams[1].getRuns())
			win = 0;
		else if(teams[0].getRuns() < teams[1].getRuns())
			win = 1;
	}

	/**
	* return 0,1,-1
	* 0 means team0 wins
	* 1 means team1 wins
	*/
	public int getWinner(){
		return win;
	}
	public boolean tossCoin(){
		double random = Math.random();
		if(random < 0.5){
			return true;
		}
		return false;
	}
}
enum MatchStatus {
	  LIVE,
	  FINISHED,
	  DRAWN
}
class Main {
	public static void main(String []s){
		Game game = new Game(50);
		boolean tossResult = game.tossCoin();
		System.out.println(tossResult);
		game.start(tossResult);
		System.out.println("winning Team : "+ game.getWinner());
	}
}
